## Skapa Azure Static Web App inne på Azure
- FYLL I ALL INFO SEDAN!!!!


## Börja med att skriva
- git init

hämta din url från ditt github repo https://github.com/Carro92/Valutaomvandlare.git
- git remote add origin https://github.com/Carro92/Valutaomvandlare.git
- git add .


## Skapa en mapp som du döper till "Valutaomvandlare" lägg två filer 
En fil som heter "index.html" Förr att lägga till html kod och skriv in
"
<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valutaomvandlare</title>
    <link rel="stylesheet" href="styles.css"> <!-- Om du skapar en CSS-fil -->
</head>
<body>
    <h1>Välkommen till Valutaomvandlaren!</h1>
    <p>Denna app kommer att hjälpa dig att omvandla valutor med aktuella växelkurser.</p>
    <!-- Du kan lägga till mer innehåll här senare -->
</body>
</html>


"

- Därefter skapar du en till fil som heter "styles.css" för att styla lite och skriv in
"
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

h1 {
    color: #333;
}

"

## Skapa en package.json fil
skriv i terminalen
- npm init -y
-öppna sedan den filen och skriv in
"
{
  "name": "valutaomvandlare",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "echo 'No build step required'" 
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}

"

## Skriv i terminalen 
- npm install axios // För att installera axios. 

- Git push


## För att se om det lyckas
- Gå in på github -> action och se om det blir godkänt
Är det godkänt

## Gå in på azure och din app som skapades tidigare "Valutaomvandlare" 
- Där det står URL kopiera din länken och klista in den i en brownser funkar det så kommer det upp en app där det står "välkommen till valutaomvandlaren"

## Färdig med frontend-delen
om du nu kan se din app med meddelandet "Välkommen till Valutaomvandlaren" och den är hostad på Azure Static Web Apps, så har du lyckats skapa och implementera frontend-delen av din valutaomvandlare! Det innebär att du har genomfört stegen för att:

-Skapa en statisk webbapp på Azure.
-Deploya frontend-koden till Azure.
-Verifiera att webbappen fungerar som förväntat.

_________________________________________________________________________________________________________________________________

## skapa en tabell i Azure table storage inne på azure
- Klicka på Create a resource i övre vänstra hörnet.
- Sök efter Storage account och välj det.
- Klicka på Create.
- Subscription: Välj din prenumeration.
- Resource group: Tips använd samma som du hade till appen
Storage account name: Ange ett unikt namn för ditt lagringskonto. (valutaomvandlarestorage )
Region: west europe
Performance: Standard 
Replication: Välj en replikeringsmetod (t.ex. Locally redundant storage (LRS)).
-Klicka på Review + create och sedan på Create.

## Aktivera azure table storage
- Gå till det lagringskonto du just har skapat.
- I vänstermenyn, klicka på Tables under Table service.
- Klicka på + Table för att skapa en ny tabell.
- Ange ett namn för tabellen, (CurrencyData) och klicka på OK.

Gå in på din storage som du skapat på azure
- i vänstra spalten finns "storage browser" tryck på den
- Välj "tables"
- Tryck på din "table" 
- Uppe i vänstra hörnet så står det nu "+ Add entity"
jag har fyllt i
Partitionkey, string, usd
rowkey, string, år-mån-da
exchangerate, double, 9.5
source, string (Skriv källan för valutakursen) (t.ex. Open Exchange Rates).

__________________________________________________________________________________________________________________________

## Logga in på  https://openexchangerates.org och hämta en API nyckel
- Gå till  https://openexchangerates.org 
- Skapa konto (Välj den som är gratis)
- på frågan website så fyllde jag bara i min URI som jag hade ifrån min static web app
- Gå in på fliken "App IDs" -> Det ska finnas en App Id som redan är skapad 
- Kopiera API - Nyckeln

## Gå nu till VS Code för att skapa en azure funktion
- Välj en mapp där där projektet ska sparas, Välj språk; c#, välj .NET 6.0 LTS, template: HTTP trigger, funktion name: FetchExchangeRates, namespace: FetchExchangeRates.function, acessrights: Anonymous

## För att lägga till och se om paketet lagt till ordentligt skriv koden (Se till att du står i rätt mapp. Nu har jag dock den i rootmappen OBS!!! HAR GJORT EN NY HISTORY OM DETTA):
- dotnet add package System.Net.Http
- För att se om det är rätt installerat öppna "minkod.csproj" och se så att paketet finns där. (    <PackageReference Include="System.Net.Http" Version="4.3.4" />)

## Bygg nu projektet för att se så att allt funkar som det ska. 
- dotnet build

## För att köra Funktionen lokalt skriv in i vs code terminalen
- func start // Detta kommando ger en URL som man kan använda för att testa funktionen.
- Trycker du på den URL så blir du skickade till en brownser där det står att du har lyckats om allt funkar.

## Eftersom att API - nyckel är känslig info så måste vi lägga den i en miljövariabel // Den är tillgänglig så länge terminalen är öppen
- Gå in på din "local.settings.json" fil och uppdatera den befintliga filen med  (under functions_worker)
-  "OPENEXCHANGERATES_API_KEY": "din-api-nyckel-här" men lägg in din rätta api nyckel

## Lägg in kod i "FetchExchangeRates" 
using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;

public static class FetchExchangeRates
{
    private static readonly HttpClient client = new HttpClient();

    [FunctionName("FetchExchangeRates")]
    public static async Task<HttpResponseMessage> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = null)] HttpRequestMessage req,
        ILogger log)
    {
        string apiKey = Environment.GetEnvironmentVariable("OPENEXCHANGERATES_API_KEY");
        string url = "https://openexchangerates.org/api/latest.json?app_id=" + apiKey;

        var response = await client.GetStringAsync(url);
        var data = JObject.Parse(response);

        var rates = data["rates"];
        
        // Lista över de 10 mest populära valutorna som du vill visa
        var popularCurrencies = new[] { "EUR", "GBP", "SEK", "USD", "AUD", "JPY", "CAD", "CHF", "NOK", "THB" };

        // Skapa en ny lista med de populära valutorna
        var filteredRates = new JObject();
        foreach (var currency in popularCurrencies)
        {
            if (rates[currency] != null)
            {
                filteredRates[currency] = rates[currency];
            }
        }

        // Svara med de filtrerade valutorna
        var result = new JObject
        {
            ["base"] = data["base"],
            ["rates"] = filteredRates
        };

        // Returnera de topp 10 valutorna som JSON
        return new HttpResponseMessage(HttpStatusCode.OK)
        {
            Content = new StringContent(result.ToString(), System.Text.Encoding.UTF8, "application/json")
        };
    }
}
// Det denna kod gör nu är att anropa APIET. Med en HTTP GET- Förfrågan till Open Exchange Rates API genom min API nyckel. Den skalar även av så att jag bara får dom topp 10 valutorna.

## För att testa och se om det funkar skriv i terminalen :
- func start // funkar det så ska du se en localhost länk och klickar du på den så kommer alla valutakurser upp. (Skulle det stå att porten är upptagen så kan du öppna en ny powershell terminal och skriva in -netstat -ano | findstr :7071 för att se process-id som kör den porten. Vill du stänga den skriver du -taskkill /PID (dom sista siffrorna i texten som du fick upp tidigare) /F )

## Är nu färdig med delen om att skapa en azure function för att hämta topp 10 valutakurser samt Testa att resurserna fungerar korrekt.
Eftersom att jag har kört "func start" i terminalen och fått ut en localhost URL som funkar och visar topp 10 valutakurserna

## Vill du kunna se valutora på vs code låt terminalen vara öppen med "func start" och öppna en till termilan och skriv:
- curl http://localhost:7071/api/FetchExchangeRates
// Då ser du också valutorna.

