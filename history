## Skapa Azure Static Web App inne på Azure
- FYLL I ALL INFO SEDAN!!!!


## Börja med att skriva
- git init

hämta din url från ditt github repo https://github.com/Carro92/Valutaomvandlare.git
- git remote add origin https://github.com/Carro92/Valutaomvandlare.git
- git add .


## Skapa en mapp som du döper till "Valutaomvandlare" lägg två filer 
En fil som heter "index.html" Förr att lägga till html kod och skriv in
"
<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valutaomvandlare</title>
    <link rel="stylesheet" href="styles.css"> <!-- Om du skapar en CSS-fil -->
</head>
<body>
    <h1>Välkommen till Valutaomvandlaren!</h1>
    <p>Denna app kommer att hjälpa dig att omvandla valutor med aktuella växelkurser.</p>
    <!-- Du kan lägga till mer innehåll här senare -->
</body>
</html>
"

## Skapa en package.json fil
skriv i terminalen
- npm init -y
-öppna sedan den filen och skriv in
"
{
  "name": "valutaomvandlare",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "echo 'No build step required'" 
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}

"

## Skriv i terminalen 
- npm install axios // För att installera axios. 

- Git push


## För att se om det lyckas
- Gå in på github -> action och se om det blir godkänt
Är det godkänt

## Gå in på azure och din app som skapades tidigare "Valutaomvandlare" 
- Där det står URL kopiera din länken och klista in den i en brownser funkar det så kommer det upp en app där det står "välkommen till valutaomvandlaren"

## Färdig med frontend-delen
om du nu kan se din app med meddelandet "Välkommen till Valutaomvandlaren" och den är hostad på Azure Static Web Apps, så har du lyckats skapa och implementera frontend-delen av din valutaomvandlare! Det innebär att du har genomfört stegen för att:

-Skapa en statisk webbapp på Azure.
-Deploya frontend-koden till Azure.
-Verifiera att webbappen fungerar som förväntat.

_________________________________________________________________________________________________________________________________

## skapa en tabell i Azure table storage inne på azure
- Klicka på Create a resource i övre vänstra hörnet.
- Sök efter Storage account och välj det.
- Klicka på Create.
- Subscription: Välj din prenumeration.
- Resource group: Tips använd samma som du hade till appen
Storage account name: Ange ett unikt namn för ditt lagringskonto. (valutaomvandlarestorage )
Region: west europe
Performance: Standard 
Replication: Välj en replikeringsmetod (t.ex. Locally redundant storage (LRS)).
-Klicka på Review + create och sedan på Create.

## Aktivera azure table storage
- Gå till det lagringskonto du just har skapat.
- I vänstermenyn, klicka på Tables under Table service.
- Klicka på + Table för att skapa en ny tabell.
- Ange ett namn för tabellen, (CurrencyData) och klicka på OK.

Gå in på din storage som du skapat på azure
- i vänstra spalten finns "storage browser" tryck på den
- Välj "tables"
- Tryck på din "table" 
- Uppe i vänstra hörnet så står det nu "+ Add entity"
jag har fyllt i
Partitionkey, string, usd
rowkey, string, år-mån-da
exchangerate, double, 9.5
source, string (Skriv källan för valutakursen) (t.ex. Open Exchange Rates).

__________________________________________________________________________________________________________________________

## Logga in på  https://openexchangerates.org och hämta en API nyckel
- Gå till  https://openexchangerates.org 
- Skapa konto (Välj den som är gratis)
- på frågan website så fyllde jag bara i min URI som jag hade ifrån min static web app
- Gå in på fliken "App IDs" -> Det ska finnas en App Id som redan är skapad 
- Kopiera API - Nyckeln

## Gå nu till VS Code för att skapa en azure funktion
- Välj en mapp där där projektet ska sparas, Välj språk; c#, välj .NET 6.0 LTS, template: HTTP trigger, funktion name: FetchExchangeRates, namespace: FetchExchangeRates.function, acessrights: Anonymous

## För att lägga till och se om paketet lagt till ordentligt skriv koden (Se till att du står i rätt mapp. Nu har jag dock den i rootmappen OBS!!! HAR GJORT EN NY HISTORY OM DETTA):
- dotnet add package System.Net.Http
- För att se om det är rätt installerat öppna "minkod.csproj" och se så att paketet finns där. (    <PackageReference Include="System.Net.Http" Version="4.3.4" />)

## Bygg nu projektet för att se så att allt funkar som det ska. 
- dotnet build

## För att köra Funktionen lokalt skriv in i vs code terminalen
- func start // Detta kommando ger en URL som man kan använda för att testa funktionen.
- Trycker du på den URL så blir du skickade till en brownser där det står att du har lyckats om allt funkar.

## Eftersom att API - nyckel är känslig info så måste vi lägga den i en miljövariabel // Den är tillgänglig så länge terminalen är öppen
- Gå in på din "local.settings.json" fil och uppdatera den befintliga filen med  (under functions_worker)
-  "OPENEXCHANGERATES_API_KEY": "din-api-nyckel-här" men lägg in din rätta api nyckel

## Lägg in kod i "FetchExchangeRates" 
using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;

public static class FetchExchangeRates
{
    private static readonly HttpClient client = new HttpClient();

    [FunctionName("FetchExchangeRates")]
    public static async Task<HttpResponseMessage> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = null)] HttpRequestMessage req,
        ILogger log)
    {
        string apiKey = Environment.GetEnvironmentVariable("OPENEXCHANGERATES_API_KEY");
        string url = "https://openexchangerates.org/api/latest.json?app_id=" + apiKey;

        var response = await client.GetStringAsync(url);
        var data = JObject.Parse(response);

        var rates = data["rates"];
        
        // Lista över de 10 mest populära valutorna som du vill visa
        var popularCurrencies = new[] { "EUR", "GBP", "SEK", "USD", "AUD", "JPY", "CAD", "CHF", "NOK", "THB" };

        // Skapa en ny lista med de populära valutorna
        var filteredRates = new JObject();
        foreach (var currency in popularCurrencies)
        {
            if (rates[currency] != null)
            {
                filteredRates[currency] = rates[currency];
            }
        }

        // Svara med de filtrerade valutorna
        var result = new JObject
        {
            ["base"] = data["base"],
            ["rates"] = filteredRates
        };

        // Returnera de topp 10 valutorna som JSON
        return new HttpResponseMessage(HttpStatusCode.OK)
        {
            Content = new StringContent(result.ToString(), System.Text.Encoding.UTF8, "application/json")
        };
    }
}
// Det denna kod gör nu är att anropa APIET. Med en HTTP GET- Förfrågan till Open Exchange Rates API genom min API nyckel. Den skalar även av så att jag bara får dom topp 10 valutorna.

## För att testa och se om det funkar skriv i terminalen :
- func start // funkar det så ska du se en localhost länk och klickar du på den så kommer alla valutakurser upp. (Skulle det stå att porten är upptagen så kan du öppna en ny powershell terminal och skriva in -netstat -ano | findstr :7071 för att se process-id som kör den porten. Vill du stänga den skriver du -taskkill /PID (dom sista siffrorna i texten som du fick upp tidigare) /F )

## Är nu färdig med delen om att skapa en azure function för att hämta topp 10 valutakurser samt Testa att resurserna fungerar korrekt.
Eftersom att jag har kört "func start" i terminalen och fått ut en localhost URL som funkar och visar topp 10 valutakurserna

## Vill du kunna se valutora på vs code låt terminalen vara öppen med "func start" och öppna en till termilan och skriv:
- curl http://localhost:7071/api/FetchExchangeRates
// Då ser du också valutorna.

____________________________________________________________________________________________________________________________
# Nästa steg är att få funktionen upp till Azure portalen + att då kan man spara i table storage också

## Gå in på VS Code
- Gå först till ".vscode" - "settings.json" och lägg till 
"
{
  "azureFunctions.deploySubpath": "src/functionapp"
}
" längst ner i den befintliga koden

## Gå nu in på Azure portalen 
Skapa en Function App:
-Tryck på Function App -> tryck sedan på "create function app"
För att skapa en ny Function App:
Subscription: Välj den prenumeration du vill använda. (Consumption)
Resource Group: Välj din befintliga valutaomvandlare-resource group. (Har du ingen så kan du skapa en)
Region: Välj West Europe (eller den region där du vill att den ska ligga).
Name: Ge din Function App ett namn, exempelvis Valutaomvandlare-FunctionApp.
Runtime stack: Välj .NET (eftersom du använder C#).
Version: Välj 8(LTS) in-process model (eller den version du vill använda).
Region: Välj West Europe.
Gå till nästa sida "Storage" och välj den du skapat tidigare (om du har skapat en sedan tidigare vilket jag har gjort)
Klicka på Review + create och skapa den.

## Gå nu tillbaka till VS Code 
- Gå till mappen som "FetchExchangeRates.cs" ligger i. Alltså "src"- "functionapp" högerklicka på "functionapp" och välj "Deploy to function app" -> Välj den funktion som du nyss skapade

// På detta sätt så fylls koden in i funktion appen

## För att kontrollera att det har blivit rätt
- Gå in på VS Code
- Gå till Azure funktionen
- Ser du "Function app" - och din nyskapade funktion app så har det lyckats
- Du kan också högerklicka på din funktion app och välja "start streaming log" står det då någonting liknande "welcome, you are now connecte to log" så funkar det som det ska


## Testa att köra funtionen ifrån Azure portalen
- Inne i din skapade function app gå till "function" och välj "FetchExchangeRates" där väljer du "test/run" och välj "run" om det lyckades så ser du olika valutor.

- Testa med URL genom att gå till knappen "get function URL" bredvid "test/run" knappen och kopiera "default (Function key)"in den koden i en webbläsare. 

##  Datalagringen i Azure Table Storage
- Gå till vs code 
- I mappen "src" -> "functionapp" skapar du en ny mapp som "StoreExchangeRates"  i den mappen skapar du en fil som heter "StoreExchangeRates.cs"
- I filen skriver du 
"
using System;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Azure.Data.Tables;

public static class StoreExchangeRates
{
    [FunctionName("StoreExchangeRates")]
    public static async Task<OkResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("StoreExchangeRates function triggered.");

        // Hämta JSON från förfrågan
        string requestBody = await req.ReadAsStringAsync();
        
        // Deserialisera JSON till en dynamisk objekt
        var exchangeRates = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(requestBody);

        // Koppla till Azure Table Storage
        string connectionString = Environment.GetEnvironmentVariable("AzureWebJobsStorage");
        var tableClient = new TableClient(connectionString, "ExchangeRates");

        // Skapa tabellen om den inte redan finns
        await tableClient.CreateIfNotExistsAsync();

        // Loopa igenom och lagra varje valutakurs
        foreach (var rate in exchangeRates.rates)
        {
            var entity = new TableEntity(exchangeRates["base"].ToString(), rate.Name)
            {
                {"Rate", rate.Value.ToString()}
            };
            await tableClient.UpsertEntityAsync(entity);
        }

        // Skicka svar
        log.LogInformation("Exchange rates saved to Table Storage.");
        return new OkResult();
    }
}

"

## Öppna local.settings.json
- lägg till 
"
{
    "AzureWebJobsStorage": "<din_storage_account_connection_string>"
}

"
- Din <din_storage_account_connection_string> hittar du inne i Azure portalen "storage account" -> "security + networking" -> ""access keys" och kopiera den och klistra in den i vs code 

- Starta sedan om VS Code 

## Testa nu om det funkar
- Skriv func start i terminalen på root katalogen
- funkar det som det ska kommer du att få två localhost. En get som du kommer direkt in på och en post. 
- Nu går du in på din "Thunder client" i vänsta spalten i vs code för att göra en post begäran.
- Välj "post", skriv in post URL som du fick i func start. Gå sedan till "Headers" och lägg till "Keys" - "Content-Type" samt "Value" - "application/json"
- Gå sedan till fliken "Body" och välj "json" och skriv in 
"
{
  "base": "USD",
  "rates": {
    "EUR": 1.1,
    "SEK": 10.5
  }
}
"

- Tryck sedan på "send". Funkar det som det ska kommer det att stå status:200 ok

## Gå in via Azure storage explorer
- Se till att vara inloggad och sen gå vidare till din tabell
- Där kan du se vilka som har lagt till och du kan även ta bort/ redigera också

## För att skapa en koverterings historik
- Gå in på Azure Storage Explorer -> "Storage account" -> "Tables" 
- Högerklicka på "Tables" och välj "Create table"
- Döp tabellen till någonting valfritt (ConversionHistory)


## Skapa en ny Azure Function för att spara konverteringshistorik //Ta emot data från frontend och spara det i ConversionHistory-tabellen
- Gå till VS Code
- Gå till "Azure Function App"-mapp i VS Code.
- För att skapa en ny function skriv i terminalen "func new "
- Av alternativen som dyker upp välj "2. HttpTrigger" 
- Döp den till valfritt (StoreConversionHistory)

- Skapa nu en mapp i "src/functionapp" och döp den till "StoreConversionHistory"
- Flytta "StoreConversionHistory.cs" filen till den nya mappen du skapat
- Skapa en ny fil i den mappen och döp den till "function.json"
Fyll i detta i filen // Denna fil beskriver hur din funktion triggas och vilket resultat den returnerar.
"
{
  "bindings": [
    {
      "authLevel": "function",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": ["get", "post"]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return"
    }
  ]
}

"
- Gå in på "local.settings.json" // Hantera specifika funktioner som arbetar med Azure Table Storage.
uppdatera koden som finns med "TableStorageConnectionString": och samma anslutningssträng som AzureWebJobsStorage

- Gå till "StoreConversionHistory.cs" och uppdatera den med ny kod
"
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Azure;
using Azure.Data.Tables;
using Newtonsoft.Json;

namespace minkod
{
    public static class StoreConversionHistory
    {
        [FunctionName("StoreConversionHistory")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("Processing conversion history...");

            // Läs JSON från begäran
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            dynamic data = JsonConvert.DeserializeObject(requestBody);

            // Validera ingångsdata
            string baseCurrency = data?.baseCurrency;
            string targetCurrency = data?.targetCurrency;
            double rate = data?.rate ?? 0;
            DateTime conversionDate = DateTime.UtcNow;

            if (string.IsNullOrEmpty(baseCurrency) || string.IsNullOrEmpty(targetCurrency) || rate <= 0)
            {
                return new BadRequestObjectResult("Invalid input. Please provide baseCurrency, targetCurrency, and rate.");
            }

            // Hämta anslutningssträngen från miljövariabler
            string connectionString = Environment.GetEnvironmentVariable("TableStorageConnectionString");
            if (string.IsNullOrEmpty(connectionString))
            {
                log.LogError("TableStorageConnectionString is not set.");
                return new StatusCodeResult(500);
            }

            // Anslut till Azure Table Storage
            var tableClient = new TableClient(connectionString, "ConversionHistory");

            // Skapa tabellen om den inte finns
            try
            {
                await tableClient.CreateIfNotExistsAsync();
                log.LogInformation("Table 'ConversionHistory' is ready.");
            }
            catch (Exception ex)
            {
                log.LogError($"Error creating or accessing the table: {ex.Message}");
                return new StatusCodeResult(500);
            }

            // Skapa en ny entitet
            var conversionEntity = new ConversionEntity
            {
                PartitionKey = baseCurrency,
                RowKey = $"{targetCurrency}-{Guid.NewGuid()}", // Kombinerar TargetCurrency med GUID, // Unikt ID för raden
                TargetCurrency = targetCurrency,
                Rate = rate,
                ConversionDate = conversionDate,
                Timestamp = DateTimeOffset.UtcNow
            };

            // Lägg till entiteten i tabellen
            try
            {
                await tableClient.AddEntityAsync(conversionEntity);
                log.LogInformation("Conversion history saved successfully.");
            }
            catch (Exception ex)
            {
                log.LogError($"Error saving conversion history: {ex.Message}");
                return new StatusCodeResult(500);
            }

            return new OkObjectResult($"Conversion from {baseCurrency} to {targetCurrency} saved.");
        }

        public class ConversionEntity : ITableEntity
        {
            public string PartitionKey { get; set; }
            public string RowKey { get; set; }
            public string TargetCurrency { get; set; }
            public double Rate { get; set; }
            public DateTime ConversionDate { get; set; }
            public DateTimeOffset? Timestamp { get; set; }
            public ETag ETag { get; set; } = ETag.All;
        }
    }
}


"

## För att kolla om det funkar
skriv i terminalen
- Func start
- Kopiera sedan " StoreConversionHistory: [POST] http://localhost:7071/api/StoreConversionHistory"
- Gå in på "Thunder client" och gör en ny post- förfrågan
- Välj post och klistra in localhost länken. Gå in på "body" och välj json och fyll i 
" {
  "baseCurrency": "USD",
  "targetCurrency": "SEK",
  "rate": 10.5
}
"
- Tryck på send.
- Blir det grönt och står 200 ok så är det rätt.

Du kan gå in i "Azure storage explorer" och där ser du att du har tabellen "ConversionHistory". Tittar du i den ska du se att den har uppdaterats. 

__________________________Färdig med historik____________________________________

# Utveckla frontend med Azure Static Web App

## Skapa en fil i mappen "src" -> "www" och döp den till "script.js" // För att kunna visa växelkurser, konvertera valuta
skriv in
"
document.addEventListener("DOMContentLoaded", () => {
    const exchangeRatesContainer = document.getElementById("exchangeRatesContainer");
    const currencyForm = document.getElementById("currencyForm");
    const resultDiv = document.getElementById("result");

    // Funktion för att hämta växelkurser
    async function fetchExchangeRates() {
        try {
            const response = await fetch("http://localhost:7071/api/FetchExchangeRates");
            const data = await response.json();

            // Visa växelkurser i HTML
            const ratesHtml = Object.entries(data.rates).map(([currency, rate]) => `
                <div>${currency}: ${rate}</div>
            `).join("");
            exchangeRatesContainer.innerHTML = `<h2>Aktuella växelkurser</h2>${ratesHtml}`;
        } catch (error) {
            console.error("Kunde inte hämta växelkurser:", error);
        }
    }

    // Funktion för att konvertera valutor
    currencyForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const baseCurrency = document.getElementById("baseCurrency").value;
        const targetCurrency = document.getElementById("targetCurrency").value;
        const amount = parseFloat(document.getElementById("amount").value);

        if (!baseCurrency || !targetCurrency || isNaN(amount)) {
            resultDiv.innerText = "Alla fält måste fyllas i korrekt!";
            return;
        }

        try {
            const response = await fetch("http://localhost:7071/api/StoreConversionHistory", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    baseCurrency: baseCurrency.toUpperCase(),
                    targetCurrency: targetCurrency.toUpperCase(),
                    rate: amount
                })
            });

            if (response.ok) {
                resultDiv.innerText = `Konvertering från ${baseCurrency} till ${targetCurrency} sparades!`;
            } else {
                resultDiv.innerText = "Fel vid konvertering. Försök igen!";
            }
        } catch (error) {
            console.error("Kunde inte utföra konverteringen:", error);
        }
    });

    // Hämta växelkurser när sidan laddas
    fetchExchangeRates();
});

"

## Uppdatera index med ny info. Bland annat länkning till script.js
"
<!DOCTYPE html>
<html lang="sv">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valutaomvandlare</title>
    <link rel="stylesheet" href="styles.css"> <!-- CSS-fil -->
</head>
<body>
    <h1>Välkommen till Valutaomvandlaren!</h1>
    <p>Denna app hjälper dig att omvandla valutor med aktuella växelkurser.</p>

    <!-- Plats för att visa aktuella växelkurser -->
    <div id="exchangeRatesContainer"></div>

    <!-- Formulär för valutaomvandling -->
    <form id="currencyForm">
        <label for="baseCurrency">Basvaluta:</label>
        <input type="text" id="baseCurrency" placeholder="Ex: USD" required>
        
        <label for="targetCurrency">Målvaluta:</label>
        <input type="text" id="targetCurrency" placeholder="Ex: SEK" required>
        
        <label for="amount">Belopp:</label>
        <input type="number" id="amount" placeholder="Ex: 100" required>
        
        <button type="submit">Konvertera</button>
    </form>

    <!-- Plats för att visa resultat -->
    <div id="result"></div>

    <!-- JavaScript-fil -->
    <script src="script.js"></script>
</body>
</html>

"
