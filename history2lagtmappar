host json
{
  "version": "2.0",
  "logging": {
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "excludedTypes": "Request"
      },
      "enableLiveMetricsFilters": true
    }
  }
}

"
using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;

public static class FetchExchangeRates
{
    private static readonly HttpClient client = new HttpClient();

    [FunctionName("FetchExchangeRates")]
    public static async Task<HttpResponseMessage> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "options", Route = null)] HttpRequestMessage req,
        ILogger log)
    {
        log.LogInformation("Fetching exchange rates...");

        // Hämta CORS-konfiguration från miljövariabel
        string corsOrigins = Environment.GetEnvironmentVariable("CORS_ALLOWED_ORIGINS");
        log.LogInformation("CORS allowed origins: " + corsOrigins);

        // Hantera OPTIONS-förfrågningar
        if (req.Method == HttpMethod.Options)
        {
            var optionsResponse = new HttpResponseMessage(HttpStatusCode.OK);
            optionsResponse.Headers.Add("Access-Control-Allow-Origin", corsOrigins);
            optionsResponse.Headers.Add("Access-Control-Allow-Methods", "GET, OPTIONS");
            optionsResponse.Headers.Add("Access-Control-Allow-Headers", "Content-Type");
            return optionsResponse;
        }

        // Hämta data från API
        string apiKey = Environment.GetEnvironmentVariable("OPENEXCHANGERATES_API_KEY");
        string url = $"https://openexchangerates.org/api/latest.json?app_id={apiKey}";

        var response = await client.GetStringAsync(url);
        var data = JObject.Parse(response);

        // Filtrera valutorna
        var popularCurrencies = new[] { "EUR", "GBP", "SEK", "USD", "AUD", "JPY", "CAD", "CHF", "NOK", "THB" };
        var filteredRates = new JObject();

        foreach (var currency in popularCurrencies)
        {
            if (data["rates"][currency] != null)
            {
                filteredRates[currency] = data["rates"][currency];
            }
        }

        var result = new JObject
        {
            ["base"] = data["base"],
            ["rates"] = filteredRates
        };

        // Returnera data med CORS-header
        var responseMessage = new HttpResponseMessage(HttpStatusCode.OK)
        {
            Content = new StringContent(result.ToString(), System.Text.Encoding.UTF8, "application/json")
        };

        responseMessage.Headers.Add("Access-Control-Allow-Origin", corsOrigins);
        responseMessage.Headers.Add("Access-Control-Allow-Methods", "GET, OPTIONS");
        responseMessage.Headers.Add("Access-Control-Allow-Headers", "Content-Type");

        return responseMessage;
    }
}
"
"

## min fetch

using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;

public static class FetchExchangeRates
{
    private static readonly HttpClient client = new HttpClient();

    [FunctionName("FetchExchangeRates")]
    public static async Task<HttpResponseMessage> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = null)] HttpRequestMessage req,
        ILogger log)
    {
        log.LogInformation("Fetching exchange rates...");

        // Hämta CORS-konfiguration från miljövariabel
        string corsOrigins = Environment.GetEnvironmentVariable("CORS_ALLOWED_ORIGINS");
        log.LogInformation("CORS allowed origins: " + corsOrigins); // Debug-logg för CORS

        string apiKey = Environment.GetEnvironmentVariable("OPENEXCHANGERATES_API_KEY");
        string url = $"https://openexchangerates.org/api/latest.json?app_id={apiKey}";  // Korrekt stränginterpolation

        var response = await client.GetStringAsync(url);
        var data = JObject.Parse(response);

        // Filtrera valutorna
        var popularCurrencies = new[] { "EUR", "GBP", "SEK", "USD", "AUD", "JPY", "CAD", "CHF", "NOK", "THB" };
        var filteredRates = new JObject();
        foreach (var currency in popularCurrencies)
        {
            if (data["rates"][currency] != null)
            {
                filteredRates[currency] = data["rates"][currency];
            }
        }

        var result = new JObject
        {
            ["base"] = data["base"],
            ["rates"] = filteredRates
        };

        // Returnera svaret med CORS-header
        var responseMessage = new HttpResponseMessage(HttpStatusCode.OK)
        {
            Content = new StringContent(result.ToString(), System.Text.Encoding.UTF8, "application/json")
        };

        // Lägg till CORS-header för att tillåta förfrågningar från dina angivna origin-domäner
        responseMessage.Headers.Add("Access-Control-Allow-Origin", corsOrigins); // Lägg till CORS-header här
        responseMessage.Headers.Add("Access-Control-Allow-Methods", "GET, POST, OPTIONS"); // Tillåt GET, POST, och OPTIONS
        responseMessage.Headers.Add("Access-Control-Allow-Headers", "Content-Type"); // Tillåt Content-Type-header

        return responseMessage;
    }
}

"

## local.setting

{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "DefaultEndpointsProtocol=https;AccountName=valutaomvandlarestorage;AccountKey=oc7XZpFbS0asVDtxWg30C6MwPvL2Nao1k87oWZOd0E4JTMYwUR8zoGLN7xrqDXpX7Ib2snfBybyH+ASt2F+nvQ==;EndpointSuffix=core.windows.net",
    "TableStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=valutaomvandlarestorage;AccountKey=oc7XZpFbS0asVDtxWg30C6MwPvL2Nao1k87oWZOd0E4JTMYwUR8zoGLN7xrqDXpX7Ib2snfBybyH+ASt2F+nvQ==;EndpointSuffix=core.windows.net",
    "FUNCTIONS_WORKER_RUNTIME": "dotnet",
    "OPENEXCHANGERATES_API_KEY": "c6a67d02f1df4caba929b95769d56950",
    "CORS_ALLOWED_ORIGINS": "http://127.0.0.1:8081,http://localhost:8081"
  }
}
